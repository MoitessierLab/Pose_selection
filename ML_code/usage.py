# Author: Nic Moitessier
# McGill University, Montreal, QC, Canada


def usage():

    print('| If you want to convert the docking data (eg, molecules_actives.sdf and protein_bindingsite_V3000.sdf) into        |')
    print('| usable data, you can use:                                                                                         |')
    print('|   python main.py --mode prepare_complexes --split_train_test 0.80 --verbose 3                                     |')
    print('|-------------------------------------------------------------------------------------------------------------------|')
    print('| If you want to prepare graphs from a set of pdb (in a file named list.txt), you can use:                          |')
    print('|   python main.py --mode prepare_graphs --split_train_test 0.80 --verbose 3 --raw_data_dir ./                      |')
    print('|-------------------------------------------------------------------------------------------------------------------|')
    print('| If you want to prepare complexes with RMSDs in xyz format from a pdb and sdf files, you can use:                  |')
    print('|   python main.py --mode prepare_complexes_xyz --split_train_test 0.80 --verbose 3 --raw_data_dir ./               |')
    print('|-------------------------------------------------------------------------------------------------------------------|')
    print('| If you want to extract good and bad poses from FITTED docking, you can use:                                       |')
    print('|   python main.py --mode split_good_bad_poses --verbose 3 --raw_data_dir "raw_data_poses/" --max_number_of_poses   |')
    print('|   10                                                                                                              |')
    print('|-------------------------------------------------------------------------------------------------------------------|')
    print('| If you want to train a model:                                                                                     |')
    print('|   python main.py --mode train --n_graph_layers 3 --verbose 2 --output train20230224  --data_dir data/             |')
    print('|   --keys_dir keys/ --train_mode "scoring"                                                                         |')
    print('|-------------------------------------------------------------------------------------------------------------------|')
    print('| If you want to write graphs in a readable manner:                                                                 |')
    print('|   python main.py --mode prepare_complexes_and_graphs --ngpu 0 --raw_data_dir FittedSet/                           |')
    print('|   --first_pose_input poses.sdf --protein_input protein_binding_site_V3000.sdf --keys_dir keys_writeGraphs/        |')
    print('|   --data_dir data_writeGraphs/ --graphs_dir data_writeGraphs_graphs/                                              |')
    print('|-------------------------------------------------------------------------------------------------------------------|')
    print('|-------------------------------------------------------------------------------------------------------------------|')
    print('| If you want to train a model for pose predictions from FITTED files (initial poses, evolving population,...)      |')
    print('| Place all the docking files (protein_binding_site_V3000.pdf, docking_initial_pose.sdf,...) in raw_data_poses      |')
    print('| create empty folders named data_poses, data_poses_graphs and keys_poses, then run the following:                  |')
    print('|                                                                                                                   |')
    print('| 1. Function to identify low-in-energy poses and split into correct (RMSD <= 1.75 Angs) and incorrect              |')
    print('|    RMSD > 3.5 Angs) poses:                                                                                        |')
    print('|   nohup python3 main.py --mode split_good_bad_poses --verbose 3 --raw_data_dir raw_data_poses/                    |')
    print('|       --max_number_of_poses 25 --max_rmsd_good 1.75 --min_rmsd_bad 3.5 --energy_threshold 50 --data_dir           |')
    print('|       data_poses/ --keys_dir keys_poses/> split.out &                                                             |')
    print('|  or (from lists for training and testing sets in raw_data_poses folder):                                          |')
    print('|    nohup python3 main.py --mode split_good_bad_poses --verbose 3 --raw_data_dir raw_data_poses/                   |')
    print('|    --max_number_of_poses 4 --max_rmsd_good 1.75 --min_rmsd_bad 3.5 --energy_threshold 50 --list_trainset          |')
    print('|    list_trainset.txt --list_testset list_testset.txt > split.out &                                                |')
    print('|                                                                                                                   |')
    print('| 2. Function to prepare the complexes (protein + pose) into distinct pickled files (random split):                 |')
    print('|   nohup python3 main.py --mode prepare_complexes --split_train_test 0.80 --verbose 3 --train_mode docking         |')
    print('|       --raw_data_dir raw_data_poses/ --data_dir "data_poses/" --keys_dir "keys_poses/" > prepare-complexes.out &  |')
    print('|  or (from lists for training and testing sets in raw_data_poses):                                                 |')
    print('|   nohup python3 main.py --mode prepare_complexes --list_trainset list_trainset.txt --list_testset                 |')
    print('|       list_testset.txt --verbose 3 --train_mode docking --raw_data_dir raw_data_poses/ --data_dir "data_poses/"   |')
    print('|       --keys_dir  "keys_poses/"  > prepare-complexes.out &                                                        |')
    print('|                                                                                                                   |')
    print('| 3. Function to precompute the graphs:                                                                             |')
    print('|   nohup python3 main.py --mode prepare_graphs --train_keys train_keys.pkl --test_keys test_keys.pkl --keys_dir    |')
    print('|       keys_poses/ --data_dir data_poses/ --graphs_dir data_poses_graphs/ --scrambling_graphs False                |')
    print('|       --good_and_bad_pairs True --max_number_of_poses 25 > prepare-graphs.out &                                   |')
    print('|                                                                                                                   |')
    print('| 4. Train the model (other parameters are available, see above):                                                   |')
    print('|   nohup python3 main.py --mode train --n_graph_layers 3 --verbose 2 --output training --data_dir                  |')
    print('|       data_poses_graphs/ --keys_dir "keys_poses/" --train_mode "docking" --graph_as_input True                    |')
    print('|       --epoch 100 --lr 0.0001 --embedding_size 160 --model_dense_neurons  128 --batch_size 32                     |')
    print('|       --atom_feature_element True --atom_feature_metal True --atom_feature_atom_size False                        |')
    print('|       --atom_feature_electronegativity False --atom_feature_partial_charge True --atom_feature_logP True          |')
    print('|       --atom_feature_MR True --atom_feature_TPSA True --atom_feature_HBA_HBD True --atom_feature_aromaticity True |')
    print('|       --atom_feature_number_of_Hs True --atom_feature_formal_charge False --bond_feature_bond_order True          |')
    print('|       --bond_feature_conjugation False --good_and_bad_pairs True > Training.out &                                 |')
    print('|-------------------------------------------------------------------------------------------------------------------|')
    print('| 1. Applying the model for pose prediction using pairs:                                                            |')
    print('|   python3 main.py --mode predict --n_graph_layers 4 --n_FC_layers 3 --load_model training_20231122_last.pth       |')
    print('|       --first_pose_input 11gs_bad_poses.sdf --second_pose_input 11gs_good_poses.sdf --protein_input               |')
    print('|       11gs_protein_pro_binding_site_V3000.sdf --keys_dir keys_predict/ --good_and_bad_pairs True                  |')
    print('|       --data_dir data_predict/ --raw_data_dir raw_data_poses/ --graphs_dir data_predict_graphs/                   |')
    print('|       --n_graph_layers 4 --n_FC_layers 3 --embedding_size 200 --model_dense_neurons  128 --atom_feature_element   |')
    print('|       True --atom_feature_metal False --atom_feature_atom_size False --atom_feature_electronegativity False       |')
    print('|       --atom_feature_partial_charge False --atom_feature_logP False --atom_feature_MR False --atom_feature_TPSA   |')
    print('|       False --atom_feature_HBA_HBD True --atom_feature_aromaticity True --atom_feature_number_of_Hs True          |')
    print('|       --atom_feature_formal_charge True --bond_feature_bond_order True --bond_feature_conjugation True            |')
    print('|-------------------------------------------------------------------------------------------------------------------|')
    print('| Any questions? Contact nicolas.moitessier@mcgill.ca                                                               |')
    print('|-------------------------------------------------------------------------------------------------------------------|')
